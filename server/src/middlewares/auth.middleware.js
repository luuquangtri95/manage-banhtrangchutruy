import { StatusCodes } from "http-status-codes";
import { env } from "~/config/enviroment";
import { PermissionModel } from "~/models/permission.model";
import { RoleModel } from "~/models/role.model";
import { UserModel } from "~/models/user.model";
import { JwtProvider } from "~/providers/JwtProvider";

const isAuthorized = async (req, res, next) => {
	try {
		const accessTokenFromCookie = req.cookies?.accessToken;

		if (!accessTokenFromCookie) {
			res.status(StatusCodes.UNAUTHORIZED).json({ message: "Unauthorized: token not found" });
			return;
		}

		// console.log("accessTokenFromCookie", accessTokenFromCookie);

		const accessTokenDecoded = await JwtProvider.verifyToken(
			accessTokenFromCookie,
			env.ACCESS_TOKEN_SECRET_SIGNATURE
		);

		// console.log("accessTokenDecoded", accessTokenDecoded);

		req.jwtDecoded = accessTokenDecoded;

		next();
	} catch (error) {
		console.log("Error from auth.middleware: ", error);

		// Tr∆∞·ªùng h·ª£p l·ªói 1: N·∫øu accessToken n√≥ b·ªã h·∫øt h·∫°n th√¨ c·∫ßn tr·∫£ v·ªÅ 1 m√£ l·ªói GONE - 410 ƒë·ªÉ FE g·ªçi l·∫°i ƒë·ªÉ refreshToken
		if (error.message?.includes("jwt expired")) {
			res.status(StatusCodes.GONE).json({ message: "Need to refresh token !" });
			return;
		}

		// Tr∆∞·ªùng h·ª£p l·ªói 2: N·∫øu accessToken kh√¥ng h·ª£p l·ªá do b·∫•t k√¨ ƒëi·ªÅu g√¨ kh√°c v·ª• h·∫øt h·∫°n th√¨ auto tr·∫£ v·ªÅ m√£ 401 cho ph√≠a FE x·ª≠ l√Ω logout ho·∫∑c call api logout tu·ª≥ tr∆∞·ªùng h·ª£p
		res.status(StatusCodes.UNAUTHORIZED).json({ message: "Unauthorized! Please login !" });
	}
};

const checkPermission =
	(requiredPermissions = []) =>
	async (req, res, next) => {
		try {
			const userInfo = req.jwtDecoded;

			const entryUser = await UserModel.findOne({
				where: { id: userInfo.id },
				include: [
					{
						model: RoleModel,
						as: "roles",
						attributes: ["id", "name"],
						through: { attributes: [] },
						include: [
							{
								model: PermissionModel,
								as: "permissions",
								attributes: ["id", "name"],
								through: { attributes: [] },
							},
						],
					},
				],
			});

			if (!entryUser) {
				return res.status(StatusCodes.NOT_FOUND).json({ message: "User not found" });
			}

			const _entryUser = JSON.parse(JSON.stringify(entryUser));

			const allPermissions = _entryUser.roles.flatMap((role) =>
				role.permissions.map((p) => p.name)
			);

			// üîç N·∫øu user c√≥ quy·ªÅn `"*"` (to√†n quy·ªÅn) -> Cho ph√©p lu√¥n
			if (allPermissions.includes("*")) return next();

			// üîç Ki·ªÉm tra n·∫øu user c√≥ **t·∫•t c·∫£** c√°c quy·ªÅn y√™u c·∫ßu
			const hasRequiredPermissions = requiredPermissions.every((perm) =>
				allPermissions.includes(perm)
			);

			if (!hasRequiredPermissions) {
				return res.status(StatusCodes.FORBIDDEN).json({
					message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y, vui l√≤ng li√™n h·ªá admin",
				});
			}

			next();
		} catch (error) {
			res.status(StatusCodes.FORBIDDEN).json({
				message: error.message || "Permission denied",
			});
		}
	};

export const AuthMiddleware = {
	isAuthorized,
	checkPermission,
};
